---
- name: Provisioning Proxmox Server
  hosts: "all"
  gather_facts: true
  become: true
  vars:
    node_type: "{% if 'is_master' in hostvars[inventory_hostname] %}master{% else %}node{% endif %}"
    user_name: "{{ ansible_user }}"
    proxmox_list: /etc/apt/sources.list.d/pve-install-repo.list
    proxmox_gpg: /etc/apt/trusted.gpg.d/proxmox-release-bookworm.gpg
    proxmox_download_url: http://download.proxmox.com/debian/pve bookworm pve-no-subscription
    gpg_url: https://enterprise.proxmox.com/debian/proxmox-release-bookworm.gpg
    grub_file: /etc/default/grub
    modules_file: /etc/modules
    debconf_selections:
      - { item: "postfix postfix/mailname string {{ hostname }}", owner: "postfix:postfix" }
      - { item: "postfix postfix/main_mailer_type string 'Internet Site'", owner: "postfix:postfix" }
    pve_enterprise_list: /etc/apt/sources.list.d/pve-enterprise.list
    interfaces_file: /etc/network/interfaces
    proxmox_url: "127.0.0.1"
    proxmox_user: root@pam
    node: "{{ hostname }}"
  tasks:
    - name: Cast create_opnsense and create_fog to Boolean True
      set_fact:
        create_opnsense: "{{ create_opnsense | bool }}"
        create_fog: "{{ create_fog | bool }}"
        create_network: "{{ create_network | bool }}"
    - name: debug
      debug:
        msg: "{{ create_fog }} - {{ create_opnsense }} - {{ create_network }}"
    - name: set pubkeys
      set_fact:
        enso_ssh_pub: "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIHaZjPkf63cVh3Kz02k+Zd8JrttOJyTG19/AP1SF0JF7 enso@enso.loeken.xyz\n{{ ssh_pubkey }}"

    - name: Update APT
      ansible.builtin.apt:
        update_cache: true
    - name: Install bridge-utils, cloud-init, ifupdown2, systemd-resolved
      ansible.builtin.apt:
        name:
          - bridge-utils
          - cloud-init
          - ifupdown2
          - systemd-resolved
    - name: Update hosts file
      ansible.builtin.lineinfile:
        path: /etc/hosts
        regexp: '^(127\.0\.1\.1)(\s+.+)$'
        line: '{{ ansible_facts.default_ipv4.address }}\2'
        backrefs: true
      when: create_network == True
    - name: set systemd resolved
      ansible.builtin.lineinfile:
        dest: "/etc/systemd/resolved.conf"
        regexp: "^DNS="
        line: "DNS=8.8.8.8 8.8.4.4 1.1.1.1 1.0.0.1"
        state: present
      when: create_network == True
    - name: Reload systemd resolved
      ansible.builtin.systemd:
        state: restarted
        name: systemd-resolved
        daemon_reload: true
      when: create_network == True
    - name: Add noatime and nodiratime to ext4 mounts
      ansible.builtin.lineinfile:
        path: /etc/fstab
        regexp: '^(UUID=[\w-]+)\s+(/\S*)\s+(ext4)\s+(\S+)\s+(\d\s+\d)$'
        line: '\1 \2 \3 \4,noatime,nodiratime \5'
        backrefs: yes

    - name: Add umask=0077 to vfat mounts
      ansible.builtin.lineinfile:
        path: /etc/fstab
        regexp: '^(UUID=[\w-]+)\s+(/\S*)\s+(vfat)\s+(\S+)\s+(\d\s+\d)$'
        line: '\1 \2 \3 \4,umask=0077 \5'
        backrefs: yes
      when: create_network == True

    - name: Gather facts
      ansible.builtin.setup:
        gather_subset:
          - network
      when: create_network == True

    - name: Identify existing vmbr* interfaces
      ansible.builtin.set_fact:
        existing_vmbr_interfaces: "{{ ansible_facts.interfaces | select('match', '^vmbr.*') | list }}"
      when: create_network == True

    - name: Identify physical interfaces and sort them
      ansible.builtin.set_fact:
        physical_interfaces: "{{ ansible_facts.interfaces | reject('match', '^(lo|wlo.*|vmbr.*|tap.*)$') | list | sort }}"
      when: create_network == True

    - name: Identify the primary interface
      ansible.builtin.set_fact:
        primary_interface: "{{ physical_interfaces | first }}"
      when: create_network == True

    - name: Set network interfaces
      ansible.builtin.template:
        src: templates/interfaces.j2
        dest: "{{ interfaces_file }}"
        mode: '0644'
      register: network_interface
      when: create_network == True

    - name: Reload network interfaces 2
      ansible.builtin.systemd:
        state: restarted
        name: networking
        daemon_reload: true
      when: network_interface.changed and create_network == True

    - name: Reload network interfaces 1
      ansible.builtin.command: ifreload --all
      register: output
      when: network_interface.changed and create_network == True

    - name: Create folder
      file:
        path: /etc/systemd/system/systemd-networkd-wait-online.service.d 
        state: directory

    - name: Create override.conf for systemd-networkd-wait-online.service
      ansible.builtin.copy:
        dest: /etc/systemd/system/systemd-networkd-wait-online.service.d/override.conf
        content: |
          [Service]
          ExecStart=
          ExecStart=/lib/systemd/systemd-networkd-wait-online -i vmbr0
        owner: root
        group: root
        mode: '0644'

    - name: reload systemd
      ansible.builtin.systemd:
        daemon_reload: yes

    - name: Add Proxmox to APT sources
      ansible.builtin.copy:
        dest: "{{ proxmox_list }}"
        content: "deb [arch=amd64] {{ proxmox_download_url }}"
        backup: true
        mode: '0644'

    - name: Download Proxmox GPG key
      ansible.builtin.get_url:
        url: "{{ gpg_url }}"
        dest: "{{ proxmox_gpg }}"
        mode: '0644'

    - name: Remove PVE enterprise list
      ansible.builtin.file:
        path: "{{ pve_enterprise_list }}"
        state: absent

    - name: Update APT
      ansible.builtin.apt:
        update_cache: true

    - name: Full system upgrade
      ansible.builtin.apt:
        update_cache: true
        upgrade: 'full'

    - name: Install pve-kernel-6.2
      ansible.builtin.apt:
        name: pve-kernel-6.2

    - name: Update grub file
      ansible.builtin.blockinfile:
        path: "{{ grub_file }}"
        marker: "# {mark} ANSIBLE MANAGED BLOCK - Do not modify or remove this marker"
        block: |
          GRUB_CMDLINE_LINUX_DEFAULT="quiet intel_iommu=on"

    - name: Append modules to file
      ansible.builtin.lineinfile:
        path: "{{ modules_file }}"
        line: '{{ item }}'
      loop:
        - vfio
        - vfio_iommu_type1
        - vfio_pci
        - vfio_virqfd

    - name: Get current kernel version
      ansible.builtin.command: uname -r
      register: kernel_version
      changed_when: false

    - name: Remove current kernel image only if it's not a pve kernel
      ansible.builtin.apt:
        name: "linux-image-{{ kernel_version.stdout }}"
        state: absent
      when: "'pve' not in kernel_version.stdout"

    - name: Update GRUB
      ansible.builtin.command: update-grub

    - name: Reboot system if required
      ansible.builtin.reboot:
      when: "'pve' not in kernel_version.stdout"

    - name: Pause for 3 seconds and then execute until host is reachable
      ansible.builtin.wait_for:
        host: "{{ ansible_host }}"
        port: "{{ ansible_port }}"
        delay: 3
        timeout: 300

    - name: Set debconf selections
      ansible.builtin.debconf:
        name: "{{ item.owner.split(':')[0] }}"
        question: "{{ item.item.split(' ')[0] }}"
        vtype: "string"
        value: "{{ item.item.split(' ')[2] }}"
      loop: "{{ debconf_selections }}"

    - name: Install packages ( lvm2 proxmox-ve postfix open-iscsi pip libguestfs-tools - this can take a few minutes )
      ansible.builtin.apt:
        name:
          - lvm2
          - proxmox-ve
          - postfix
          - open-iscsi
          - pip
          - libguestfs-tools
        state: latest
        update_cache: true
        autoremove: true

    - name: Remove os-prober
      ansible.builtin.apt:
        name: os-prober
        state: absent

    - name: Remove PVE enterprise list
      ansible.builtin.file:
        path: "{{ pve_enterprise_list }}"
        state: absent

    - name: Set root password
      ansible.builtin.user:
        name: root
        password: "{{ root_password | password_hash('sha512') }}"

    - name: Disable SSH strict host key checking
      ansible.builtin.lineinfile:
        dest: "/root/.ssh/config"
        create: true
        regexp: 'Host \*'
        mode: '0644'
        line: |
          Host *
            StrictHostKeyChecking no
            UserKnownHostsFile=/dev/null
      when: is_master != 'yes'

    - name: Install proxmoxer using apt
      ansible.builtin.apt:
        name: python3-proxmoxer
        state: latest
    - name: Check if /etc/pve/corosync.conf exists
      ansible.builtin.stat:
        path: /etc/pve/corosync.conf
      register: corosync_conf

    - name: Determine master node
      ansible.builtin.set_fact:
        master_node: "{{ item }}"
      loop: "{{ ansible_play_batch }}"
      when: hostvars[item]['is_master'] == 'yes'
      run_once: true

    - name: Add the host to the known hosts
      ansible.builtin.known_hosts:
        path: "/root/.ssh/known_hosts"
        name: "{{ ansible_host }}"
        key: "{{ lookup('pipe', 'ssh-keyscan -t ecdsa ' + ansible_host) }}"
      when: is_master != 'yes'
      delegate_to: "{{ item }}"
      loop: "{{ ansible_play_batch }}"

    - name: Check if SSH key exists
      ansible.builtin.stat:
        path: ~/.ssh/id_rsa
      register: ssh_file

    - name: Generate SSH key if it does not exist
      ansible.builtin.command: ssh-keygen -f ~/.ssh/id_rsa -t rsa -N ''
      when: not ssh_file.stat.exists

    - name: Fetch public key from node
      ansible.builtin.fetch:
        src: ~/.ssh/id_rsa.pub
        dest: "/tmp/id_rsa.pub"
        flat: true
      when: is_master != 'yes'

    - name: Add the public key to authorized keys on master
      ansible.posix.authorized_key:
        user: root
        state: present
        key: "{{ lookup('file', '/tmp/id_rsa.pub') }}"
      when:
        - hostvars[item]['is_master'] == 'yes'
        - ansible_play_batch | length > 1
      delegate_to: "{{ master_node }}"
      loop: "{{ ansible_play_batch }}"


    - name: Create Proxmox cluster
      ansible.builtin.shell: pvecm create {{ ansible_facts.hostname }}
      when: not corosync_conf.stat.exists and "'no cluster name' in pvecm_status.stdout" and is_master == 'yes'

    - name: Determine master node
      ansible.builtin.set_fact:
        master_node: "{{ item }}"
      loop: "{{ ansible_play_batch }}"
      when: hostvars[item]['is_master'] == 'yes'
      run_once: true

    - name: Wait for Corosync to be up
      ansible.builtin.systemd:
        name: corosync
        state: started
      register: corosync_status

    - name: Check if Proxmox cluster is running
      ansible.builtin.shell: pvecm status && sleep 5
      register: pvecm_status
      changed_when: false
      when: not corosync_conf.stat.exists and is_master == 'yes'

    - name: Join Proxmox cluster
      ansible.builtin.shell: "pvecm add {{ hostvars[master_node]['internal_ip'] }} --use_ssh"
      when: is_master != 'yes'

    - name: Fail if Corosync service is not active
      ansible.builtin.fail:
        msg: "Corosync service is not active"
      when: corosync_status.failed
    
    ## DEBIAN SECTION START
    - name: Gather VM information for template-debian-vm
      ansible.builtin.shell: qm list --full 2>/dev/null | grep -o 'template-debian-{{ hostname }}'
      register: proxmox_template_vm
      ignore_errors: true

    - name: Check if VM with name template-debian-{{ hostname }} exists
      ansible.builtin.set_fact:
        template_vm_exists: "{{ proxmox_template_vm.stdout_lines | length > 0 }}"

    - name: Create VM
      community.general.proxmox_kvm:
        api_user: "{{ proxmox_user }}"
        api_password: "{{ root_password }}"
        api_host: "localhost"
        node: "{{ hostname }}"
        name: "template-debian-vm-{{ hostname }}"
        memory: 1024
        cores: 1
        sockets: 1
        net: '{"net0":"virtio,bridge=vmbr1"}'
        agent: 1
        ide: '{"ide2":"local:cloudinit"}'
        vga: qxl
        state: present
        sshkeys: "{{ enso_ssh_pub }}"
        ciuser: "{{ ansible_user }}"
        onboot: true
        nameservers:
          - 8.8.8.8
          - 1.1.1.1
      register: result
      until: result is succeeded
      retries: 3
      delay: 10
      when: not template_vm_exists

    - block:
      - name: Download NoCloud Debian image
        ansible.builtin.get_url:
          url: https://cloud.debian.org/images/cloud/bookworm/latest/debian-12-nocloud-amd64.qcow2
          dest: /var/lib/vz/images/debian-12-nocloud-amd64.qcow2
          mode: '0755'

      - name: Import disk to local storage
        ansible.builtin.command: qm importdisk {{ result.vmid }} /var/lib/vz/images/debian-12-nocloud-amd64.qcow2 local

      - name: Attach the disk to the virtual machine
        ansible.builtin.command: qm set {{ result.vmid }} -scsihw virtio-scsi-pci -virtio0  /var/lib/vz/images/{{ result.vmid }}/vm-{{ result.vmid }}-disk-0.raw

      - name: Run commands
        ansible.builtin.command: "{{ item }}"
        with_items:
          - qm set {{ result.vmid }} -serial0 socket
          - qm set {{ result.vmid }} --ipconfig0 ip=dhcp,ip6=dhcp
          - qm set {{ result.vmid }} -boot c -bootdisk virtio0
          - qm set {{ result.vmid }} -hotplug disk,network,usb
          - qm set {{ result.vmid }} -vcpus 1

      - name: Prepare for template conversion
        ansible.builtin.command: "{{ item }}"
        with_items:
          - 'virt-customize -a /var/lib/vz/images/{{ result.vmid }}/vm-{{ result.vmid }}-disk-0.raw --install cron,qemu-guest-agent,cloud-init,cloud-initramfs-growroot,open-iscsi,lsscsi,sg3-utils,multipath-tools,scsitools,nfs-common,lvm2,policycoreutils'
          - 'virt-customize -a /var/lib/vz/images/{{ result.vmid }}/vm-{{ result.vmid }}-disk-0.raw --append-line "/etc/multipath.conf:defaults {"'
          - 'virt-customize -a /var/lib/vz/images/{{ result.vmid }}/vm-{{ result.vmid }}-disk-0.raw --append-line "/etc/multipath.conf:    user_friendly_names yes"'
          - 'virt-customize -a /var/lib/vz/images/{{ result.vmid }}/vm-{{ result.vmid }}-disk-0.raw --append-line "/etc/multipath.conf:    find_multipaths yes"'
          - 'virt-customize -a /var/lib/vz/images/{{ result.vmid }}/vm-{{ result.vmid }}-disk-0.raw --append-line "/etc/multipath.conf:}"'
          - 'virt-customize -a /var/lib/vz/images/{{ result.vmid }}/vm-{{ result.vmid }}-disk-0.raw --run-command "systemctl enable open-iscsi.service"'
          - 'virt-customize -a /var/lib/vz/images/{{ result.vmid }}/vm-{{ result.vmid }}-disk-0.raw --run-command "echo fs.inotify.max_user_instances=8192 >> /etc/sysctl.conf"'
          - 'virt-customize -a /var/lib/vz/images/{{ result.vmid }}/vm-{{ result.vmid }}-disk-0.raw --run-command "echo fs.inotify.max_user_watches=524288 >> /etc/sysctl.conf"'
          - 'virt-customize -a /var/lib/vz/images/{{ result.vmid }}/vm-{{ result.vmid }}-disk-0.raw --append-line "/etc/cloud/cloud.cfg:datasource_list: [ NoCloud, None ]"'
          - 'virt-customize -a /var/lib/vz/images/{{ result.vmid }}/vm-{{ result.vmid }}-disk-0.raw --append-line "/etc/cloud/cloud.cfg.d/99-disable-network-config.cfg:# network: {config: disabled}"'
          - 'virt-customize -a /var/lib/vz/images/{{ result.vmid }}/vm-{{ result.vmid }}-disk-0.raw --append-line "/etc/systemd/resolved.conf:DNS=8.8.8.8 8.8.4.4 1.1.1.1 1.0.0.1"'
          - 'virt-customize -a /var/lib/vz/images/{{ result.vmid }}/vm-{{ result.vmid }}-disk-0.raw --append-line "/etc/systemd/resolved.conf:#DNS=2001:4860:4860::8888 2001:4860:4860::8844  2606:4700:4700::1111 2606:4700:4700::1001"'
          - 'virt-customize -a /var/lib/vz/images/{{ result.vmid }}/vm-{{ result.vmid }}-disk-0.raw --run-command "truncate -s 0 /etc/machine-id"'

# /etc/cloud/cloud.cfg.d/99-disable-network-config.cfg with the following:
# network: {config: disabled}
      - name: Get next VM ID and clone VM then Convert VM to a Template
        delegate_to: "{{ inventory_hostname }}"
        shell: |
          NEWID=$(pvesh get /cluster/nextid) && \
          qm clone {{ result.vmid }} $NEWID --name template-debian-{{ hostname }} --full true && \
          qm template $NEWID
          qm destroy {{ result.vmid }}
        throttle: 1
      when: result is changed

    ## DEBIAN SECTION END
    ## OPNSENSE SECTION START
    - name: Conditionally include opnsense role
      include_role:
        name: opnsense
      when: create_opnsense == True
    - name: Conditionally include fog role
      include_role:
        name: fog
      when: create_fog == True
    - name: Conditionally include debian12cloud role
      include_role:
        name: debian12cloud
      when: create_fog == True
    - name: Partition disk and setup NFS server
      block:
        - name: Gather facts
          ansible.builtin.setup:
            filter: ansible_default_ipv4

        - name: Determine network address
          ansible.builtin.set_fact:
            network_address: "{{ ansible_default_ipv4.network }}/24"

        - name: Install required packages
          ansible.builtin.apt:
            name: ['parted', 'nfs-kernel-server']
            update_cache: true
          become: true

        - name: Partition disk
          community.general.parted:
            device: "/dev/{{ partition_external_device_name }}"
            number: 1
            state: present
            part_start: 0%  
            part_end: 100%
            label: gpt
          become: true
          when: partition_external_device == 'true'
        - name: Format partition
          ansible.builtin.filesystem:
            fstype: ext4
            dev: "/dev/{{ partition_external_device_name }}1"
          become: true
          when: partition_external_device == 'true'
        - name: Create data directory
          ansible.builtin.file:
            path: /mnt/data
            state: directory
          become: true
        - name: Update /etc/fstab
          ansible.builtin.lineinfile:
            path: /etc/fstab
            regexp: '^/dev/{{ partition_external_device_name }}1'
            line: "/dev/{{ partition_external_device_name }}1 /mnt/data ext4 rw,discard,errors=remount-ro 0 1"
            state: present
          become: true
          when: partition_external_device == 'true'
        - name: Mount all filesystems
          ansible.builtin.mount:
            path: /mnt/data
            src: "/dev/{{ partition_external_device_name }}1"
            fstype: ext4
            state: mounted
          become: true
          when: partition_external_device == 'true'
        - name: Update /etc/exports
          ansible.builtin.lineinfile:
            path: /etc/exports
            line: "/mnt/data {{ network_address }}(rw,all_squash,anonuid=1000,anongid=1000)"
            state: present
          become: true
          register: changedexports
        - name: Change ownership of /mnt/data
          ansible.builtin.file:
            path: /mnt/data
            owner: "{{ ansible_user }}"
            group: "{{ ansible_user }}"
            recurse: true
          become: true

        - name: Restart NFS server
          ansible.builtin.systemd:
            name: nfs-kernel-server
            state: restarted
          become: true
          when: changedexports.changed
      when: is_master == 'yes'

    - name: Get current hostname
      ansible.builtin.command: hostname
      register: current_hostname

    - name: Debug
      ansible.builtin.debug:
        msg: "{{ current_hostname.stdout }}::{{ hostname }}"

    - name: Check hostname
      ansible.builtin.fail:
        msg: "Hostname does not match desired hostname: {{ hostname }}"
      when: current_hostname.stdout != hostname

    - name: install curl
      ansible.builtin.apt:
        name: curl
        state: latest
        update_cache: true
      become: true

    - name: Get external IP
      ansible.builtin.shell: curl ifconfig.co -4
      register: current_external_ip
      changed_when: false

    - name: Check external IP
      ansible.builtin.fail:
        msg: "External IP {{ current_external_ip.stdout }} does not match desired IP: {{ ansible_host }}"
      when: current_external_ip.stdout != ansible_host

    - name: Get service status
      ansible.builtin.service_facts:

    - name: Check pve-cluster service
      ansible.builtin.set_fact:
        pve_cluster_running: "{{ 'pve-cluster.service' in ansible_facts.services and ansible_facts.services['pve-cluster.service'].state == 'running' }}"

    - name: Check k3s service
      ansible.builtin.set_fact:
        k3s_running: "{{ 'k3s.service' in ansible_facts.services and ansible_facts.services['k3s.service'].state == 'running' }}"

    - name: Save facts to file on local
      ansible.builtin.copy:
        content: "{{ ansible_facts | combine({'pve_cluster_running': pve_cluster_running, 'k3s_running': k3s_running}) | to_nice_json }}"
        dest: "/tmp/enso-probe-output.txt"

    - name: Fetch the file to local
      ansible.builtin.fetch:
        src: "/tmp/enso-probe-output.txt"
        dest: "output.txt"
        flat: true
