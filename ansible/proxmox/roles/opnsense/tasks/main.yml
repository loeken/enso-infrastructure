## OPNSENSE SECTION START
- name: Gather VM information from Proxmox
  ansible.builtin.shell: qm list --full 2>/dev/null | grep -o 'template-opnsense-{{ hostname }}'
  register: proxmox_vms
  ignore_errors: true

- name: Check if OPNsense VM with name template-opnsense-{{ hostname }} exists
  ansible.builtin.set_fact:
    opnsense_vm_exists: "{{ proxmox_vms.stdout_lines | length > 0 }}"

- name: Gather facts
  ansible.builtin.setup:
    gather_subset:
      - network

- name: Select only vmbr* interfaces
  ansible.builtin.set_fact:
    vmbr_interfaces: "{{ ansible_facts.interfaces | select('match', '^vmbr[0-9]+$') | list }}"

- name: Initialize empty net_dict
  ansible.builtin.set_fact:
    net_dict: {}

- name: Fail if vmbr_interfaces is not defined
  ansible.builtin.fail:
    msg: "vmbr_interfaces is not defined"
  when: vmbr_interfaces is undefined or vmbr_interfaces | length == 0

- name: Build net dictionary for OPNsense VM (simplified)
  ansible.builtin.set_fact:
    net_dict: "{{ net_dict | combine({ 'net' ~ item.0|string : 'virtio,bridge=' ~ item.1 }) }}"
  with_indexed_items: "{{ vmbr_interfaces }}"
  when: vmbr_interfaces is defined and vmbr_interfaces | length > 0

- name: Create OPNsense VM
  community.general.proxmox_kvm:
    api_user: "{{ proxmox_user }}"
    api_password: "{{ root_password }}"
    api_host: "localhost"
    node: "{{ hostname }}"
    name: "template-opnsense-{{ hostname }}"
    memory: 1024
    cores: 1
    sockets: 1
    net: "{{ net_dict }}"
    agent: 1
    ide: '{"ide2":"local:cloudinit"}'
    vga: qxl
    state: present
  register: opnsense_result
  until: opnsense_result is succeeded
  retries: 3
  delay: 10
  when: not opnsense_vm_exists

- block:
  - name: Download OPNsense nano image
    ansible.builtin.get_url:
      url: https://mirror.ams1.nl.leaseweb.net/opnsense/releases/23.7/OPNsense-23.7-nano-amd64.img.bz2
      dest: /var/lib/vz/images/OPNsense-23.7-nano-amd64.img.bz2
      mode: '0755'

  - name: Check if decompressed OPNsense image already exists
    ansible.builtin.stat:
      path: /var/lib/vz/images/OPNsense-23.7-nano-amd64.img
    register: decompressed_img_stat

  - name: Decompress OPNsense image
    ansible.builtin.command: bzip2 -d /var/lib/vz/images/OPNsense-23.7-nano-amd64.img.bz2
    when: not decompressed_img_stat.stat.exists

  - name: Convert OPNsense image to qcow2
    ansible.builtin.command: qemu-img convert -f raw -O qcow2 /var/lib/vz/images/OPNsense-23.7-nano-amd64.img /var/lib/vz/images/OPNsense-23.7-nano-amd64.qcow2

  - name: Resize OPNsense image
    ansible.builtin.command: qemu-img resize /var/lib/vz/images/OPNsense-23.7-nano-amd64.qcow2 +8G

  - name: Import disk to local storage
    ansible.builtin.command: qm importdisk {{ opnsense_result.vmid }} /var/lib/vz/images/OPNsense-23.7-nano-amd64.qcow2 local

  - name: Attach the disk to the virtual machine
    ansible.builtin.command: qm set {{ opnsense_result.vmid }} -scsihw virtio-scsi-pci -virtio0 /var/lib/vz/images/{{ opnsense_result.vmid }}/vm-{{ opnsense_result.vmid }}-disk-0.raw

  - name: Run additional commands for OPNsense VM
    ansible.builtin.command: "{{ item }}"
    with_items:
      - qm set {{ opnsense_result.vmid }} -serial0 socket
      - qm set {{ opnsense_result.vmid }} -boot c -bootdisk virtio0
      - qm set {{ opnsense_result.vmid }} -hotplug disk,network,usb
      - qm set {{ opnsense_result.vmid }} -vcpus 1

  - name: Get next VM ID for OPNsense and clone VM then Convert VM to a Template
    delegate_to: "{{ inventory_hostname }}"
    shell: |
      NEWID=$(pvesh get /cluster/nextid) && \
      qm clone {{ opnsense_result.vmid }} $NEWID --name template-opnsense-{{ hostname }} --full true && \
      qm template $NEWID
      qm destroy {{ opnsense_result.vmid }}
    throttle: 1

  - name: Get next VM ID for new OPNsense VM
    delegate_to: "{{ inventory_hostname }}"
    shell: pvesh get /cluster/nextid
    register: new_vm_id

  - name: Create OPNsense VM from template
    community.general.proxmox_kvm:
      api_user: "{{ proxmox_user }}"
      api_password: "{{ root_password }}"
      api_host: "localhost"
      node: "{{ hostname }}"
      name: "opnsense"
      clone: "template-opnsense-{{ hostname }}"
      newid: "{{ new_vm_id.stdout }}"
      memory: 2048  # You can adjust memory, cores, and other parameters as per your needs.
      cores: 2
      sockets: 1
      state: started
      onboot: true
    register: new_opnsense_vm

  - name: Wait for OPNsense VM to be accessible
    ansible.builtin.wait_for:
      host: "192.168.1.1"
      port: 22  # Change this to the port used for SSH or management
      timeout: 600  # Change this to an appropriate timeout value in seconds
    delegate_to: localhost

  - name: Set OPNsense host credentials
    add_host:
      name: "192.168.1.1"
      groups: opnsense_group
      ansible_user: root
      ansible_password: opnsense

  - name: Installing 'os-api-backup' package on OPNsense
    ansibleguy.opnsense.package:
      name: 'os-api-backup'
      action: 'install'
    delegate_to: "192.168.1.1"

  when: opnsense_result is changed
## OPNSENSE SECTION END