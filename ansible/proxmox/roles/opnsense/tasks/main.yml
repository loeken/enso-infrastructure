## OPNSENSE SECTION START
- name: Gather VM information from Proxmox
  ansible.builtin.shell: qm list --full 2>/dev/null | grep -o 'template-opnsense-{{ hostname }}'
  register: proxmox_vms
  ignore_errors: true

- name: Check if OPNsense VM with name template-opnsense-{{ hostname }} exists
  ansible.builtin.set_fact:
    opnsense_vm_exists: "{{ proxmox_vms.stdout_lines | length > 0 }}"

- name: Create OPNsense VM
  community.general.proxmox_kvm:
    api_user: "{{ proxmox_user }}"
    api_password: "{{ root_password }}"
    api_host: "localhost"
    node: "{{ hostname }}"
    name: "template-opnsense-{{ hostname }}"
    memory: 8196
    cores: 2
    sockets: 1
    net:
      net0: "virtio,bridge=vmbr1"
      net1: "virtio,bridge=vmbr0"
    agent: 1
    ide: '{"ide2":"local:cloudinit"}'
    vga: qxl
    state: present
    sshkeys: "{{ enso_ssh_pub }}"
    ciuser: "{{ ansible_user }}"
    onboot: true
    nameservers:
      - 8.8.8.8
      - 1.1.1.1
    cpu: host
  register: opnsense_result
  until: opnsense_result is succeeded
  retries: 3
  delay: 10
  when: not opnsense_vm_exists

- name: Manually Resize VM Disk
  ansible.builtin.command:
    cmd: "qm resize {{ opnsense_result.vmid }} virtio0 +7G"
  when: opnsense_result.changed

- block:
  - name: Check if decompressed OPNsense image already exists
    ansible.builtin.stat:
      path: /var/lib/vz/images/OPNsense-23.7-nano-amd64.img
    register: decompressed_img_stat

  - name: Download OPNsense nano image
    ansible.builtin.get_url:
      url: https://mirror.ams1.nl.leaseweb.net/opnsense/releases/23.7/OPNsense-23.7-nano-amd64.img.bz2
      dest: /var/lib/vz/images/OPNsense-23.7-nano-amd64.img.bz2
      mode: '0755'
    when: not decompressed_img_stat.stat.exists

  - name: Decompress OPNsense image
    ansible.builtin.command: bzip2 -d /var/lib/vz/images/OPNsense-23.7-nano-amd64.img.bz2
    when: not decompressed_img_stat.stat.exists

  - name: Convert OPNsense image to qcow2
    ansible.builtin.command: qemu-img convert -f raw -O qcow2 /var/lib/vz/images/OPNsense-23.7-nano-amd64.img /var/lib/vz/images/OPNsense-23.7-nano-amd64.qcow2

  #- name: Insert setup.sh into OPNsense image using virt-customize
  # ansible.builtin.command: virt-customize -a /var/lib/vz/images/OPNsense-23.7-nano-amd64.qcow2 --run-command "pkg update && pkg install -y qemu-guest-agent"
  # --upload /tmp/setup.sh:/usr/local/etc/rc.syshook.d/start/50-setup.sh --run-command 'chmod +x /usr/local/etc/rc.syshook.d/start/50-setup.sh'

  - name: Import disk to local storage
    ansible.builtin.command: qm importdisk {{ opnsense_result.vmid }} /var/lib/vz/images/OPNsense-23.7-nano-amd64.qcow2 local

  - name: Attach the disk to the virtual machine
    ansible.builtin.command: qm set {{ opnsense_result.vmid }} -scsihw virtio-scsi-pci -virtio0 /var/lib/vz/images/{{ opnsense_result.vmid }}/vm-{{ opnsense_result.vmid }}-disk-0.raw

  - name: filepath
    file:
      path: /tmp/opnsense_config/conf
      state: directory

  - name: Upload config.xml to Proxmox host 
    template:
      src: templates/config.j2
      dest: /tmp/opnsense_config/conf/config.xml
      owner: root
      group: root
      mode: '0644'

  - name: Upload setup.sh to Proxmox host 
    copy:
      src: files/setup.sh
      dest: /tmp/opnsense_config/setup.sh
      owner: root
      group: root
      mode: '0777'

  - name: Create ISO containing config.xml
    command:
      cmd: mkisofs -o /var/lib/vz/template/iso/opnsense_config.iso /tmp/opnsense_config
    become: true

  - name: Attach the ISO as a CD-ROM to the virtual machine
    ansible.builtin.command: qm set {{ opnsense_result.vmid }} -cdrom /var/lib/vz/template/iso/opnsense_config.iso
    become: true

  - name: Remove temporary config.xml from Proxmox host
    file:
      path: /tmp/config.xml
      state: absent

  - name: Run additional commands for OPNsense VM
    ansible.builtin.command: "{{ item }}"
    with_items:
      - qm set {{ opnsense_result.vmid }} -serial0 socket
      - qm set {{ opnsense_result.vmid }} -boot c -bootdisk virtio0
      - qm set {{ opnsense_result.vmid }} -hotplug disk,network,usb
      - qm set {{ opnsense_result.vmid }} -vcpus 1

  - name: Get next VM ID for OPNsense and clone VM then Convert VM to a Template
    delegate_to: "{{ inventory_hostname }}"
    shell: |
      qm clone {{ opnsense_result.vmid }} 998 --name template-opnsense-{{ hostname }} --full true && \
      qm template 998
      qm destroy {{ opnsense_result.vmid }}
      sleep 10
    throttle: 1

  - name: Get next VM ID for new OPNsense VM
    delegate_to: "{{ inventory_hostname }}"
    shell: pvesh get /cluster/nextid
    register: new_vm_id

  - name: Clone OPNsense VM from template
    community.general.proxmox_kvm:
      api_user: "{{ proxmox_user }}"
      api_password: "{{ root_password }}"
      api_host: "localhost"
      node: "{{ hostname }}"
      name: "opnsense"
      clone: "template-opnsense-{{ hostname }}"
      newid: "{{ new_vm_id.stdout }}"
      memory: 4096
      cores: 4
      sockets: 1
      state: present  # Only clone, do not start
      sshkeys: "{{ enso_ssh_pub }}"
      ciuser: "{{ ansible_user }}"
      onboot: true
      nameservers:
        - 8.8.8.8
        - 1.1.1.1
    register: new_opnsense_vm

  - name: Start the newly cloned OPNsense VM
    community.general.proxmox_kvm:
      api_user: "{{ proxmox_user }}"
      api_password: "{{ root_password }}"
      api_host: "localhost"
      node: "{{ hostname }}"
      vmid: "{{ new_vm_id.stdout }}"
      state: started

  - name: Display debug message for user action
    ansible.builtin.debug:
      msg:
        - "####################################################"
        - "# IMPORTANT: MANUAL ACTION REQUIRED!               #"
        - "# 1. Login to the OPNsense VM.                     #"
        - "# 2. Install the QEMU guest agent package:         #"
        - "#    pkg install -y os-qemu-guest-agent            #"
        - "# 3. Start the QEMU guest agent service:           #"
        - "#    service qemu-guest-agent start                #"
        - "####################################################"

  - name: Wait for QEMU Guest Agent to become responsive
    ansible.builtin.command:
      cmd: "qm guest exec {{ new_opnsense_vm.vmid }} -- true"
    register: guest_agent_ping
    until: guest_agent_ping.rc == 0
    retries: 60
    delay: 10

  - name: Create /mnt/cdrom directory via qm guest exec
    ansible.builtin.command: >
      qm guest exec {{ new_vm_id.stdout }} -- mkdir /mnt/cdrom
    when: new_opnsense_vm is changed

  - name: Mount CD-ROM via qm guest exec
    ansible.builtin.command: >
      qm guest exec {{ new_vm_id.stdout }} -- mount_cd9660 /dev/cd0 /mnt/cdrom
    when: new_opnsense_vm is changed

  - name: cp file to /root
    ansible.builtin.command: >
      qm guest exec {{ new_vm_id.stdout }} -- cp /mnt/cdrom/setup.sh /root/setup.sh
    when: new_opnsense_vm is changed

  - name: Set execute permission for setup.sh
    ansible.builtin.command: >
      qm guest exec {{ new_vm_id.stdout }} -- chmod +x /root/setup.sh
    when: new_opnsense_vm is changed

  - name: Execute setup.sh via qm guest exec and capture output
    ansible.builtin.command: >
      qm guest exec {{ new_vm_id.stdout }} -- sh /root/setup.sh
    register: script_output
    when: new_opnsense_vm is changed

  - name: Print script output
    ansible.builtin.debug:
      var: script_output
      
  - name: Wait for OPNsense VM to be accessible ( first boot )
    wait_for:
      host: "{{ opnsense_ip | default('192.168.1.1') }}"
      port: 80
      state: 'started'
      timeout: 900

  - name: Wait for OPNsense VM to be inaccessible ( reboot ) 
    wait_for:
      host: "{{ opnsense_ip | default('192.168.1.1') }}"
      port: 80
      state: 'stopped'
      timeout: 900
  - name: Wait for OPNsense VM to be accessible ( after reboot )
    wait_for:
      host: "{{ opnsense_ip | default('192.168.1.1') }}"
      port: 80
      state: 'started'
      timeout: 900
  when: opnsense_result is changed
